import 'package:booklink_visual/screen/booking/booking.dart';
import 'package:booklink_visual/screen/cubit/business/business_appointments_cubit.dart';
import 'package:booklink_visual/screen/cubit/user/business_user_appointments_cubit.dart';
import 'package:booklink_visual/screen/cubit/user/key_store.dart';
import 'package:booklink_visual/screen/cubit/user/user_appointments_cubit.dart';
import 'package:booklink_visual/screen/landing/landing.dart';
import 'package:booklink_visual/screen/loading/loading.dart';
import 'package:booklink_visual/screen/private/home_screen.dart';
import 'package:booklink_visual/screen/registration/login_page.dart';
import 'package:booklink_visual/screen/registration/register_page.dart';
import 'package:booklink_visual/screen/splash/splash_screen.dart';
import 'package:booklink_visual/utils/routes.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:openapi_generator_annotations/openapi_generator_annotations.dart';

void main() {
  runApp(const BooklinkApp());
}

@Openapi(additionalProperties: AdditionalProperties(pubName: 'booklink_api', pubAuthor: 'davidfesteban'), inputSpecFile: 'booklink_open_api.json', generatorName: Generator.dart, outputDirectory: 'lib/autogenerated-api')
class BooklinkApp extends StatelessWidget {
  const BooklinkApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
        providers: [
          BlocProvider(lazy: false, create: (BuildContext context) => UserAppointmentsCubit()),
          BlocProvider(lazy: false, create: (BuildContext context) => KeyStoreCubit()),
          BlocProvider(lazy: false, create: (BuildContext context) => BusinessAppointmentsCubit()),
          BlocProvider(lazy: false, create: (BuildContext context) => PublicBusinessAppointmentsCubit())
        ],
        child: Builder(builder: ((context) {
          return MaterialApp(
              title: 'Booklink',
              debugShowCheckedModeBanner: false,
              //TODO: What if remove primaryColors?
              theme: ThemeData(primaryColor: Colors.black, useMaterial3: true),
              initialRoute: splash_route,
              scaffoldMessengerKey: context.read<KeyStoreCubit>().get().scaffoldKey,
              navigatorKey: context.read<KeyStoreCubit>().get().navigatorKey,
              routes: {
                landing_route: (context) => const LandingScreen(),
                login_route: (context) => const LoginPage(),
                join_route: (context) => const JoinPage(),
                loading_route: (context) => LoadingScreen(),
                booking_route: (context) => const BookingScreen(),
                splash_route: (context) => const SplashScreen(),
                home_route: (context) => const HomeScreen()
                //welcome_route: (context) => WelcomeScreen(),
                //success_route: (context) => SuccessScreen(),
                //error_route: (context) => ErrorScreen()
              });
        })));
  }
}
